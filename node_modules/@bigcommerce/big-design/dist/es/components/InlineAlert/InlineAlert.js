import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { CloseIcon } from '@bigcommerce/big-design-icons';
import React, { memo, useMemo } from 'react';
import { excludeMarginProps, excludePaddingProps } from '../../mixins';
import { getActionVariant, getMessagingIcon } from '../../utils';
import { Box } from '../Box';
import { Button } from '../Button';
import { MessagingButton } from '../Button/private';
import { GridItem } from '../Grid';
import { StyledActionsWrapper, StyledHeader, StyledInlineAlert, StyledLink, StyledMessageItem } from './styled';
export var InlineAlert = /*#__PURE__*/memo(function (_ref) {
  var className = _ref.className,
      style = _ref.style,
      header = _ref.header,
      props = _objectWithoutProperties(_ref, ["className", "style", "header"]);

  var filteredProps = excludePaddingProps(props);
  var icon = useMemo(function () {
    return props.type && getMessagingIcon(props.type, true);
  }, [props.type]);
  var renderedMessages = useMemo(function () {
    return props.messages.map(function (_ref2, index) {
      var text = _ref2.text,
          link = _ref2.link;
      return /*#__PURE__*/React.createElement(Box, {
        key: index
      }, /*#__PURE__*/React.createElement(StyledMessageItem, null, text), " ", link && /*#__PURE__*/React.createElement(StyledLink, link, link.text));
    });
  }, [props.messages]);
  var renderedHeader = useMemo(function () {
    return header && /*#__PURE__*/React.createElement(StyledHeader, null, header);
  }, [header]);
  var renderedActions = useMemo(function () {
    return props.actions && /*#__PURE__*/React.createElement(StyledActionsWrapper, {
      flexDirection: "row",
      flexWrap: "wrap",
      marginTop: "xSmall"
    }, props.actions.map(function (_ref3, index) {
      var text = _ref3.text,
          _ref3$variant = _ref3.variant,
          variant = _ref3$variant === void 0 ? 'secondary' : _ref3$variant,
          actionProps = _objectWithoutProperties(_ref3, ["text", "variant"]);

      return /*#__PURE__*/React.createElement(Button, _extends({}, excludeMarginProps(actionProps), {
        key: index,
        marginBottom: "xSmall",
        marginHorizontal: "xxSmall",
        mobileWidth: "auto",
        variant: getActionVariant(variant)
      }), text);
    }));
  }, [props.actions]);
  return /*#__PURE__*/React.createElement(StyledInlineAlert, _extends({}, filteredProps, {
    backgroundColor: "white",
    role: "alert"
  }), /*#__PURE__*/React.createElement(GridItem, {
    gridArea: "icon"
  }, icon), /*#__PURE__*/React.createElement(GridItem, {
    gridArea: "messages"
  }, renderedHeader, renderedMessages, renderedActions), props.onClose && /*#__PURE__*/React.createElement(GridItem, null, /*#__PURE__*/React.createElement(MessagingButton, {
    onClick: props.onClose,
    iconOnly: /*#__PURE__*/React.createElement(CloseIcon, {
      size: "medium",
      title: "Close."
    })
  })));
});
InlineAlert.defaultProps = {
  messages: [],
  type: 'success'
};