"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Popover = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactPopper = require("react-popper");

var _hooks = require("../../hooks");

var _mixins = require("../../mixins");

var _Box = require("../Box");

var Popover = function Popover(_ref) {
  var anchorElement = _ref.anchorElement,
      children = _ref.children,
      isOpen = _ref.isOpen,
      _ref$role = _ref.role,
      role = _ref$role === void 0 ? 'dialog' : _ref$role,
      props = (0, _objectWithoutProperties2.default)(_ref, ["anchorElement", "children", "isOpen", "role"]);
  var uniquePopoverId = (0, _hooks.useUniqueId)('popover');
  var rest = (0, _mixins.excludeMarginProps)(props);
  (0, _react.useEffect)(function () {
    if (!anchorElement) {
      return;
    }

    anchorElement.setAttribute('aria-controls', uniquePopoverId);
    anchorElement.setAttribute('aria-expanded', String(isOpen));
    anchorElement.setAttribute('aria-haspopup', role);
  }, [anchorElement, isOpen, role, uniquePopoverId]);
  return isOpen ? /*#__PURE__*/_react.default.createElement(InternalPopover, (0, _extends2.default)({
    anchorElement: anchorElement
  }, rest, {
    id: uniquePopoverId
  }), children) : null;
};

exports.Popover = Popover;

// We use an Internal component that mounts/unmounts on isOpen
// This facilitates running cleanups on some effects.
var InternalPopover = function InternalPopover(_ref2) {
  var anchorElement = _ref2.anchorElement,
      children = _ref2.children,
      _ref2$closeOnClickOut = _ref2.closeOnClickOutside,
      closeOnClickOutside = _ref2$closeOnClickOut === void 0 ? true : _ref2$closeOnClickOut,
      _ref2$closeOnEscKey = _ref2.closeOnEscKey,
      closeOnEscKey = _ref2$closeOnEscKey === void 0 ? true : _ref2$closeOnEscKey,
      id = _ref2.id,
      label = _ref2.label,
      _ref2$matchAnchorElem = _ref2.matchAnchorElementWidth,
      matchAnchorElementWidth = _ref2$matchAnchorElem === void 0 ? false : _ref2$matchAnchorElem,
      _ref2$skidding = _ref2.skidding,
      skidding = _ref2$skidding === void 0 ? 0 : _ref2$skidding,
      _ref2$distance = _ref2.distance,
      distance = _ref2$distance === void 0 ? 4 : _ref2$distance,
      _ref2$onClose = _ref2.onClose,
      onClose = _ref2$onClose === void 0 ? function () {
    return null;
  } : _ref2$onClose,
      _ref2$placement = _ref2.placement,
      placement = _ref2$placement === void 0 ? 'auto' : _ref2$placement,
      role = _ref2.role,
      props = (0, _objectWithoutProperties2.default)(_ref2, ["anchorElement", "children", "closeOnClickOutside", "closeOnEscKey", "id", "label", "matchAnchorElementWidth", "skidding", "distance", "onClose", "placement", "role"]);

  var _useState = (0, _react.useState)(null),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      popperElement = _useState2[0],
      setPopperElement = _useState2[1];

  var previousFocus = (0, _react.useRef)(typeof document !== 'undefined' ? document.activeElement : null);
  var popperModifiers = (0, _react.useMemo)(function () {
    return [{
      name: 'offset',
      options: {
        offset: [skidding, distance]
      }
    }, {
      name: 'sameWidth',
      enabled: matchAnchorElementWidth,
      phase: 'beforeWrite',
      requires: ['computeStyles'],
      fn: function fn(_ref3) {
        var state = _ref3.state;
        state.styles.popper.width = "".concat(state.rects.reference.width, "px");
      },
      effect: function effect(_ref4) {
        var state = _ref4.state;
        var element = state.elements.reference;

        if (element instanceof HTMLElement) {
          state.elements.popper.style.width = "".concat(element.offsetWidth, "px");
        }
      }
    }];
  }, [skidding, distance, matchAnchorElementWidth]);

  var _usePopper = (0, _reactPopper.usePopper)(anchorElement, popperElement, {
    modifiers: popperModifiers,
    placement: placement
  }),
      styles = _usePopper.styles,
      attributes = _usePopper.attributes;

  (0, _react.useEffect)(function () {
    var prevFocus = previousFocus.current;
    return function () {
      if (prevFocus && typeof prevFocus.focus === 'function') {
        prevFocus.focus();
      }
    };
  }, []); // Setup close on click outside

  (0, _react.useEffect)(function () {
    if (typeof document === 'undefined' || !closeOnClickOutside) {
      return;
    }

    var clickHandler = function clickHandler(event) {
      if (!(event.target instanceof Element)) {
        return;
      }

      if (popperElement === null || popperElement === void 0 ? void 0 : popperElement.contains(event.target)) {
        return;
      }

      onClose();
    };

    document.addEventListener('click', clickHandler);
    return function () {
      document.removeEventListener('click', clickHandler);
    };
  }, [closeOnClickOutside, onClose, popperElement]); // Setup close on Esc key

  (0, _react.useEffect)(function () {
    if (typeof document === 'undefined' || !closeOnEscKey) {
      return;
    }

    var keydownHandler = function keydownHandler(event) {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', keydownHandler);
    return function () {
      document.removeEventListener('keydown', keydownHandler);
    };
  }, [closeOnEscKey, onClose]);
  return /*#__PURE__*/_react.default.createElement(_Box.Box, (0, _extends2.default)({
    "aria-label": label,
    backgroundColor: "white",
    padding: "medium",
    role: role,
    shadow: "floating",
    tabIndex: -1,
    zIndex: "popover"
  }, props, attributes.popper, {
    id: id,
    ref: setPopperElement,
    style: styles.popper
  }), children);
};