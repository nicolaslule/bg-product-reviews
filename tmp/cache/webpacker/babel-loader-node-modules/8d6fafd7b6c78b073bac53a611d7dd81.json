{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { CheckIcon, RemoveIcon } from '@bigcommerce/big-design-icons';\nimport React, { cloneElement, forwardRef, isValidElement, useMemo } from 'react';\nimport { useUniqueId } from '../../hooks';\nimport { typedMemo, warning } from '../../utils';\nimport { FormControlDescription } from '../Form';\nimport { CheckboxLabel } from './Label';\nimport { CheckboxContainer, CheckboxLabelContainer, HiddenCheckbox, StyledCheckbox } from './styled';\n\nvar RawCheckbox = function RawCheckbox(_ref) {\n  var checked = _ref.checked,\n      className = _ref.className,\n      description = _ref.description,\n      disabled = _ref.disabled,\n      hiddenLabel = _ref.hiddenLabel,\n      isIndeterminate = _ref.isIndeterminate,\n      label = _ref.label,\n      forwardedRef = _ref.forwardedRef,\n      style = _ref.style,\n      props = _objectWithoutProperties(_ref, [\"checked\", \"className\", \"description\", \"disabled\", \"hiddenLabel\", \"isIndeterminate\", \"label\", \"forwardedRef\", \"style\"]);\n\n  var uniqueCheckboxId = useUniqueId('checkbox');\n  var id = props.id ? props.id : uniqueCheckboxId;\n  var labelId = useUniqueId('checkbox_label');\n  var renderedLabel = useMemo(function () {\n    if (!label) {\n      return null;\n    }\n\n    if (typeof label === 'string') {\n      return /*#__PURE__*/React.createElement(CheckboxLabel, {\n        disabled: disabled,\n        hidden: hiddenLabel,\n        htmlFor: id,\n        \"aria-hidden\": disabled,\n        id: labelId\n      }, label);\n    }\n\n    if ( /*#__PURE__*/ /*#__PURE__*/isValidElement(label) && label.type === CheckboxLabel) {\n      return /*#__PURE__*/cloneElement(label, {\n        hidden: hiddenLabel,\n        htmlFor: id,\n        id: labelId\n      });\n    }\n\n    warning('label must be either a string or a CheckboxLabel component.');\n  }, [disabled, hiddenLabel, id, label, labelId]);\n  var renderedDescription = useMemo(function () {\n    if (!description) {\n      return null;\n    }\n\n    var link = _typeof(description) === 'object' ? description.link : undefined;\n    var text = _typeof(description) === 'object' ? description.text : description;\n    return /*#__PURE__*/React.createElement(FormControlDescription, {\n      link: link\n    }, text);\n  }, [description]);\n  return /*#__PURE__*/React.createElement(CheckboxContainer, {\n    className: className,\n    style: style\n  }, /*#__PURE__*/React.createElement(HiddenCheckbox, _extends({\n    type: \"checkbox\",\n    checked: checked,\n    id: id,\n    disabled: disabled\n  }, props, {\n    \"aria-checked\": checked,\n    \"aria-labelledby\": labelId,\n    ref: function ref(checkbox) {\n      if (checkbox && typeof isIndeterminate === 'boolean') {\n        checkbox.indeterminate = !checked && isIndeterminate;\n      }\n\n      if (forwardedRef) {\n        if (typeof forwardedRef === 'function') {\n          forwardedRef(checkbox);\n        } else {\n          // RefObject.current is readonly in DefinitelyTyped\n          // but in practice you can still write to it.\n          // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065\n          forwardedRef.current = checkbox;\n        }\n      }\n    }\n  })), /*#__PURE__*/React.createElement(StyledCheckbox, {\n    disabled: disabled,\n    isIndeterminate: isIndeterminate,\n    checked: checked,\n    htmlFor: id,\n    \"aria-hidden\": true\n  }, !checked && isIndeterminate ? /*#__PURE__*/React.createElement(RemoveIcon, null) : /*#__PURE__*/React.createElement(CheckIcon, null)), /*#__PURE__*/React.createElement(CheckboxLabelContainer, null, renderedLabel, renderedDescription));\n};\n\nexport var Checkbox = typedMemo( /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var className = _ref2.className,\n      style = _ref2.style,\n      props = _objectWithoutProperties(_ref2, [\"className\", \"style\"]);\n\n  return /*#__PURE__*/React.createElement(RawCheckbox, _extends({}, props, {\n    forwardedRef: ref\n  }));\n}));","map":null,"metadata":{},"sourceType":"module"}