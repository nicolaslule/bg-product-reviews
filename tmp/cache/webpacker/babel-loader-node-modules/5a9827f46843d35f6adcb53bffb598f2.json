{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { CloseIcon } from '@bigcommerce/big-design-icons';\nimport focusTrap from 'focus-trap';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useUniqueId } from '../../hooks';\nimport { typedMemo } from '../../utils';\nimport { Button } from '../Button';\nimport { MessagingButton } from '../Button/private';\nimport { H2 } from '../Typography';\nimport { StyledModal, StyledModalActions, StyledModalBody, StyledModalClose, StyledModalContent, StyledModalHeader } from './styled';\nexport var Modal = typedMemo(function (props) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalContainer = _useState2[0],\n      setModalContainer = _useState2[1];\n\n  useEffect(function () {\n    var container = document.createElement('div');\n    document.body.appendChild(container);\n    setModalContainer(container);\n  }, []);\n  useEffect(function () {\n    return function () {\n      if (modalContainer) {\n        document.body.removeChild(modalContainer);\n      }\n    };\n  }, [modalContainer]);\n  return props.isOpen && modalContainer ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(InternalModal, props), modalContainer) : null;\n});\n\nvar InternalModal = function InternalModal(_ref) {\n  var actions = _ref.actions,\n      _ref$backdrop = _ref.backdrop,\n      backdrop = _ref$backdrop === void 0 ? true : _ref$backdrop,\n      children = _ref.children,\n      _ref$closeOnClickOuts = _ref.closeOnClickOutside,\n      closeOnClickOutside = _ref$closeOnClickOuts === void 0 ? false : _ref$closeOnClickOuts,\n      _ref$closeOnEscKey = _ref.closeOnEscKey,\n      closeOnEscKey = _ref$closeOnEscKey === void 0 ? true : _ref$closeOnEscKey,\n      header = _ref.header,\n      _ref$onClose = _ref.onClose,\n      onClose = _ref$onClose === void 0 ? function () {\n    return null;\n  } : _ref$onClose,\n      _ref$variant = _ref.variant,\n      variant = _ref$variant === void 0 ? 'modal' : _ref$variant;\n  var initialBodyOverflowYRef = useRef('');\n  var internalTrap = useRef(null);\n  var headerUniqueId = useUniqueId('modal_header');\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalRef = _useState4[0],\n      setModalRef = _useState4[1];\n\n  var onClickAway = function onClickAway(event) {\n    if (closeOnClickOutside && modalRef === event.target) {\n      onClose();\n    }\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    if (closeOnEscKey && event.key === 'Escape') {\n      onClose();\n    }\n  }; // Disable scroll on body when modal is open\n\n\n  useEffect(function () {\n    initialBodyOverflowYRef.current = document.body.style.overflowY || '';\n    document.body.style.overflowY = 'hidden';\n    return function () {\n      document.body.style.overflowY = initialBodyOverflowYRef.current;\n    };\n  }, []); // Setup focus-trap\n\n  useEffect(function () {\n    if (modalRef && internalTrap.current === null) {\n      internalTrap.current = focusTrap(modalRef, {\n        fallbackFocus: modalRef\n      });\n      internalTrap.current.activate();\n    }\n\n    return function () {\n      var _internalTrap$current;\n\n      (_internalTrap$current = internalTrap.current) === null || _internalTrap$current === void 0 ? void 0 : _internalTrap$current.deactivate();\n    };\n  }, [internalTrap, modalRef]);\n  var renderedClose = useMemo(function () {\n    return variant === 'modal' && /*#__PURE__*/React.createElement(StyledModalClose, null, /*#__PURE__*/React.createElement(MessagingButton, {\n      onClick: onClose,\n      iconOnly: /*#__PURE__*/React.createElement(CloseIcon, {\n        title: \"Close\"\n      })\n    }));\n  }, [onClose, variant]);\n  var renderedHeader = useMemo(function () {\n    return header && typeof header === 'string' && /*#__PURE__*/React.createElement(StyledModalHeader, {\n      id: headerUniqueId\n    }, /*#__PURE__*/React.createElement(H2, {\n      margin: \"none\"\n    }, header));\n  }, [header, headerUniqueId]);\n  var renderedActions = useMemo(function () {\n    return Array.isArray(actions) && /*#__PURE__*/React.createElement(StyledModalActions, {\n      justifyContent: \"flex-end\"\n    }, actions.map(function (_ref2, index) {\n      var text = _ref2.text,\n          props = _objectWithoutProperties(_ref2, [\"text\"]);\n\n      return /*#__PURE__*/React.createElement(Button, _extends({\n        key: index\n      }, props), text);\n    }));\n  }, [actions]);\n  return /*#__PURE__*/React.createElement(StyledModal, {\n    backdrop: backdrop,\n    onClick: onClickAway,\n    onKeyDown: onKeyDown,\n    ref: setModalRef,\n    variant: variant,\n    tabIndex: -1\n  }, /*#__PURE__*/React.createElement(StyledModalContent, {\n    variant: variant,\n    \"aria-labelledby\": headerUniqueId,\n    flexDirection: \"column\"\n  }, renderedClose, renderedHeader, /*#__PURE__*/React.createElement(StyledModalBody, null, children), renderedActions));\n};","map":null,"metadata":{},"sourceType":"module"}