{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useMemo, useReducer, useState } from 'react';\nimport { useUniqueId } from '../../hooks';\nimport { typedMemo } from '../../utils';\nimport { createReducer, createReducerInit } from './reducer';\nimport { StyledUl } from './styled';\nimport { TreeNode } from './TreeNode';\n\nvar InternalTree = function InternalTree(_ref) {\n  var iconless = _ref.iconless,\n      id = _ref.id,\n      initialNodes = _ref.initialNodes,\n      onCollapse = _ref.onCollapse,\n      onExpand = _ref.onExpand,\n      onSelect = _ref.onSelect,\n      selectable = _ref.selectable;\n\n  var _useState = useState(initialNodes),\n      _useState2 = _slicedToArray(_useState, 1),\n      nodes = _useState2[0];\n\n  var uniqueTreeId = useUniqueId('tree');\n  var treeId = id !== null && id !== void 0 ? id : uniqueTreeId;\n  var reducer = useMemo(function () {\n    return createReducer();\n  }, []);\n  var reducerInit = useMemo(function () {\n    return createReducerInit();\n  }, []);\n\n  var _useReducer = useReducer(reducer, {\n    nodes: nodes,\n    selectable: selectable\n  }, reducerInit),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var renderedItems = useMemo(function () {\n    return nodes.map(function (node, index) {\n      return /*#__PURE__*/React.createElement(TreeNode, _extends({}, node, {\n        dispatch: dispatch,\n        iconless: iconless,\n        key: index,\n        onCollapse: onCollapse,\n        onExpand: onExpand,\n        onSelect: onSelect,\n        selectable: selectable,\n        state: state,\n        treeId: treeId\n      }));\n    });\n  }, [iconless, nodes, onCollapse, onExpand, onSelect, selectable, state, treeId]);\n  return /*#__PURE__*/React.createElement(StyledUl, {\n    id: treeId,\n    role: \"tree\",\n    \"aria-multiselectable\": selectable === 'multi',\n    style: {\n      overflow: 'hidden'\n    }\n  }, renderedItems);\n};\n\nexport var Tree = typedMemo(InternalTree);","map":null,"metadata":{},"sourceType":"module"}