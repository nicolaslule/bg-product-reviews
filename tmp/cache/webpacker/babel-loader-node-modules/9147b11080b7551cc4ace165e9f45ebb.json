{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { counter, getId, getPrefix } from \"./context\"; // --------------------------------------------\n\nvar prefixId = function prefixId(id, prefix, name) {\n  var uid = prefix + id;\n  return String(name ? name(uid) : uid);\n};\n/**\n * @deprecated\n * UID in form of renderProps (not SSR friendly)\n * @see https://github.com/thearnica/react-uid#react-components\n * @example\n * // get UID to connect label to input\n * <UID>\n *   {(id)} => <label htmlFor={id}><input id={id}/>}\n * </UID>\n *\n * // get uid to generate uid for a keys in a list\n * <UID>\n *   {(, uid)} => items.map(item => <li key={uid(item) />)}\n * </UID>\n */\n\n\nvar UID =\n/** @class */\nfunction (_super) {\n  __extends(UID, _super);\n\n  function UID() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      quartz: _this.props.idSource || counter,\n      prefix: getPrefix(_this.props.idSource),\n      id: getId(_this.props.idSource || counter)\n    };\n\n    _this.uid = function (item) {\n      return prefixId(_this.state.id + '-' + _this.state.quartz.uid(item), _this.state.prefix, _this.props.name);\n    };\n\n    return _this;\n  }\n\n  UID.prototype.render = function () {\n    var _a = this.props,\n        children = _a.children,\n        name = _a.name;\n    var _b = this.state,\n        id = _b.id,\n        prefix = _b.prefix;\n    return children(prefixId(id, prefix, name), this.uid);\n  };\n\n  return UID;\n}(React.Component);\n\nexport { UID };","map":null,"metadata":{},"sourceType":"module"}