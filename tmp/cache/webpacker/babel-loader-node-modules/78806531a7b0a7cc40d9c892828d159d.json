{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { cloneElement, forwardRef, isValidElement, useMemo, useState } from 'react';\nimport { useUniqueId } from '../../hooks';\nimport { typedMemo, warning } from '../../utils';\nimport { Chip } from '../Chip';\nimport { FormControlDescription, FormControlError, FormControlLabel } from '../Form';\nimport { StyledIconWrapper, StyledInput, StyledInputContent, StyledInputWrapper } from './styled';\n\nvar StyleableInput = function StyleableInput(_ref) {\n  var chips = _ref.chips,\n      description = _ref.description,\n      disabled = _ref.disabled,\n      error = _ref.error,\n      forwardedRef = _ref.forwardedRef,\n      label = _ref.label,\n      labelId = _ref.labelId,\n      props = _objectWithoutProperties(_ref, [\"chips\", \"description\", \"disabled\", \"error\", \"forwardedRef\", \"label\", \"labelId\"]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      focus = _useState2[0],\n      setFocus = _useState2[1];\n\n  var uniqueInputId = useUniqueId('input');\n  var id = props.id ? props.id : uniqueInputId;\n\n  var handleFocus = function handleFocus(event) {\n    var onFocus = props.onFocus;\n    setFocus(true);\n    return onFocus && onFocus(event);\n  };\n\n  var handleBlur = function handleBlur(event) {\n    var onBlur = props.onBlur;\n    setFocus(false);\n    return onBlur && onBlur(event);\n  };\n\n  var renderedLabel = useMemo(function () {\n    if (!label) {\n      return null;\n    }\n\n    if (typeof label === 'string') {\n      return /*#__PURE__*/React.createElement(FormControlLabel, {\n        id: labelId,\n        htmlFor: id,\n        renderOptional: !props.required\n      }, label);\n    }\n\n    if ( /*#__PURE__*/ /*#__PURE__*/isValidElement(label) && label.type === FormControlLabel) {\n      return /*#__PURE__*/cloneElement(label, {\n        id: labelId,\n        htmlFor: id\n      });\n    }\n\n    warning('label must be either a string or a FormControlLabel component.');\n  }, [id, label, labelId, props.required]);\n  var renderedDescription = useMemo(function () {\n    if (!description) {\n      return null;\n    }\n\n    if (typeof description === 'string') {\n      return /*#__PURE__*/React.createElement(FormControlDescription, null, description);\n    }\n\n    if ( /*#__PURE__*/ /*#__PURE__*/isValidElement(description) && description.type === FormControlDescription) {\n      return description;\n    }\n\n    warning('description must be either a string or a FormControlDescription component.');\n  }, [description]);\n  var renderedIconLeft = useMemo(function () {\n    if (!props.iconLeft) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(StyledIconWrapper, {\n      paddingLeft: \"xSmall\",\n      paddingRight: \"xxSmall\"\n    }, props.iconLeft);\n  }, [props.iconLeft]);\n  var renderedIconRight = useMemo(function () {\n    if (!props.iconRight) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(StyledIconWrapper, {\n      paddingLeft: \"xxSmall\",\n      paddingRight: \"xSmall\"\n    }, props.iconRight);\n  }, [props.iconRight]);\n  var renderedChips = useMemo(function () {\n    if (!chips) {\n      return null;\n    }\n\n    return chips.map(function (chip) {\n      return /*#__PURE__*/React.createElement(Chip, _extends({}, chip, {\n        key: chip.label,\n        marginBottom: \"none\"\n      }));\n    });\n  }, [chips]);\n  var errors = useMemo(function () {\n    var validateError = function validateError(err) {\n      if (!err) {\n        return null;\n      }\n\n      if (typeof err === 'string') {\n        return err;\n      }\n\n      if ( /*#__PURE__*/ /*#__PURE__*/isValidElement(err) && err.type === FormControlError) {\n        return err;\n      }\n\n      warning('error must be either a string or a FormControlError component.');\n    };\n\n    if (Array.isArray(error)) {\n      var nextError = error.reduce(function (acc, errorItem) {\n        var nextErrorItem = validateError(errorItem);\n        return nextErrorItem ? [].concat(_toConsumableArray(acc), [nextErrorItem]) : acc;\n      }, []);\n      return nextError.length > 0 ? nextError : null;\n    }\n\n    return validateError(error);\n  }, [error]);\n  return /*#__PURE__*/React.createElement(\"div\", null, renderedLabel, renderedDescription, /*#__PURE__*/React.createElement(StyledInputWrapper, {\n    disabled: disabled,\n    error: errors,\n    focus: focus\n  }, renderedIconLeft, /*#__PURE__*/React.createElement(StyledInputContent, {\n    chips: chips\n  }, renderedChips, /*#__PURE__*/React.createElement(StyledInput, _extends({}, props, {\n    disabled: disabled,\n    chips: chips,\n    error: errors,\n    id: id,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: forwardedRef\n  }))), renderedIconRight));\n};\n\nexport var Input = typedMemo( /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var className = _ref2.className,\n      style = _ref2.style,\n      props = _objectWithoutProperties(_ref2, [\"className\", \"style\"]);\n\n  return /*#__PURE__*/React.createElement(StyleableInput, _extends({}, props, {\n    forwardedRef: ref\n  }));\n}));","map":null,"metadata":{},"sourceType":"module"}