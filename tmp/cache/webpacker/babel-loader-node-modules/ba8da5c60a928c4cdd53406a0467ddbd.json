{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { ArrowDropDownIcon, ChevronLeftIcon, ChevronRightIcon } from '@bigcommerce/big-design-icons';\nimport React, { memo, useCallback, useEffect, useState } from 'react';\nimport { Dropdown } from '../Dropdown';\nimport { Flex, FlexItem } from '../Flex';\nimport { StyledButton } from './styled';\nexport var Pagination = /*#__PURE__*/memo(function (_ref) {\n  var itemsPerPage = _ref.itemsPerPage,\n      currentPage = _ref.currentPage,\n      totalItems = _ref.totalItems,\n      _ref$itemsPerPageOpti = _ref.itemsPerPageOptions,\n      itemsPerPageOptions = _ref$itemsPerPageOpti === void 0 ? [] : _ref$itemsPerPageOpti,\n      onPageChange = _ref.onPageChange,\n      onItemsPerPageChange = _ref.onItemsPerPageChange;\n\n  var _useState = useState(Math.max(1, Math.ceil(totalItems / itemsPerPage))),\n      _useState2 = _slicedToArray(_useState, 2),\n      maxPages = _useState2[0],\n      setMaxPages = _useState2[1];\n\n  var _useState3 = useState({\n    start: 0,\n    end: 0\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      itemRange = _useState4[0],\n      setItemRange = _useState4[1];\n\n  var handlePageOutOfBounds = useCallback(function () {\n    if (currentPage < 1 || isNaN(currentPage) || currentPage === undefined) {\n      onPageChange(1);\n    } else if (currentPage > maxPages) {\n      onPageChange(maxPages);\n    }\n  }, [currentPage, maxPages, onPageChange]);\n  var handlePerPageOutOfBounds = useCallback(function () {\n    if (itemsPerPage < 1 || isNaN(itemsPerPage) || itemsPerPage === undefined) {\n      onItemsPerPageChange(itemsPerPageOptions[0]);\n    }\n  }, [itemsPerPage, onItemsPerPageChange, itemsPerPageOptions]);\n  var calculateRange = useCallback(function () {\n    var firstItemInRange = itemsPerPage * (currentPage - 1) + 1;\n    var lastItemInRange = itemsPerPage * currentPage;\n    firstItemInRange = Math.min(firstItemInRange, totalItems);\n    lastItemInRange = Math.min(lastItemInRange, totalItems);\n\n    if (lastItemInRange === 0 || isNaN(lastItemInRange) || isNaN(firstItemInRange)) {\n      firstItemInRange = 0;\n      lastItemInRange = 0;\n    }\n\n    setItemRange({\n      start: firstItemInRange,\n      end: lastItemInRange\n    });\n  }, [itemsPerPage, currentPage, totalItems]);\n  useEffect(function () {\n    handlePageOutOfBounds();\n    handlePerPageOutOfBounds();\n    calculateRange();\n    setMaxPages(Math.max(1, Math.ceil(totalItems / itemsPerPage)));\n  }, [calculateRange, currentPage, handlePageOutOfBounds, handlePerPageOutOfBounds, itemsPerPage, totalItems]);\n\n  var handlePageIncrease = function handlePageIncrease() {\n    onPageChange(currentPage + 1);\n  };\n\n  var handlePageDecrease = function handlePageDecrease() {\n    onPageChange(currentPage - 1);\n  };\n\n  var handleRangeChange = function handleRangeChange(item) {\n    return onItemsPerPageChange(Number(item.hash));\n  };\n\n  var showRanges = function showRanges() {\n    return itemRange.start === itemRange.end ? \"\".concat(itemRange.start, \" of \").concat(totalItems) : \"\".concat(itemRange.start, \" - \").concat(itemRange.end, \" of \").concat(totalItems);\n  };\n\n  return /*#__PURE__*/React.createElement(Flex, {\n    role: \"navigation\",\n    \"aria-label\": \"pagination\",\n    flexDirection: \"row\"\n  }, /*#__PURE__*/React.createElement(FlexItem, null, /*#__PURE__*/React.createElement(Dropdown, {\n    items: itemsPerPageOptions.map(function (range) {\n      return {\n        content: \"\".concat(range),\n        hash: \"\".concat(range),\n        onItemClick: handleRangeChange\n      };\n    }),\n    toggle: /*#__PURE__*/React.createElement(StyledButton, {\n      variant: \"subtle\",\n      iconRight: /*#__PURE__*/React.createElement(ArrowDropDownIcon, {\n        size: \"xxLarge\"\n      })\n    }, showRanges())\n  })), /*#__PURE__*/React.createElement(FlexItem, null, /*#__PURE__*/React.createElement(StyledButton, {\n    iconOnly: /*#__PURE__*/React.createElement(ChevronLeftIcon, {\n      title: \"Previous page\"\n    }),\n    variant: \"subtle\",\n    disabled: currentPage <= 1,\n    onClick: handlePageDecrease\n  }), /*#__PURE__*/React.createElement(StyledButton, {\n    iconOnly: /*#__PURE__*/React.createElement(ChevronRightIcon, {\n      title: \"Next page\"\n    }),\n    variant: \"subtle\",\n    disabled: currentPage >= maxPages,\n    onClick: handlePageIncrease\n  })));\n});\nPagination.displayName = 'Pagination';","map":null,"metadata":{},"sourceType":"module"}