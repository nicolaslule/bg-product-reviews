{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { AddCircleOutlineIcon, RemoveCircleOutlineIcon } from '@bigcommerce/big-design-icons';\nimport React, { cloneElement, forwardRef, isValidElement, useEffect, useMemo, useState } from 'react';\nimport { useUniqueId } from '../../hooks';\nimport { typedMemo, warning } from '../../utils';\nimport { FormControlDescription, FormControlError, FormControlLabel } from '../Form';\nimport { StyledCounterButton, StyledCounterInput, StyledCounterWrapper } from './styled';\nexport var StylableCounter = typedMemo(function (_ref) {\n  var _ref$min = _ref.min,\n      min = _ref$min === void 0 ? 0 : _ref$min,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max,\n      _ref$step = _ref.step,\n      step = _ref$step === void 0 ? 1 : _ref$step,\n      forwardedRef = _ref.forwardedRef,\n      label = _ref.label,\n      labelId = _ref.labelId,\n      description = _ref.description,\n      error = _ref.error,\n      disabled = _ref.disabled,\n      value = _ref.value,\n      onCountChange = _ref.onCountChange,\n      props = _objectWithoutProperties(_ref, [\"min\", \"max\", \"step\", \"forwardedRef\", \"label\", \"labelId\", \"description\", \"error\", \"disabled\", \"value\", \"onCountChange\"]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      focus = _useState2[0],\n      setFocus = _useState2[1];\n\n  var uniqueCounterId = useUniqueId('counter');\n  var id = props.id ? props.id : uniqueCounterId;\n  useEffect(function () {\n    if (!Number.isInteger(value)) {\n      onCountChange(Math.round(value));\n    }\n  }, [onCountChange, value]);\n\n  var handleFocus = function handleFocus(event) {\n    var onFocus = props.onFocus;\n    setFocus(true);\n    return onFocus && onFocus(event);\n  };\n\n  var handleBlur = function handleBlur(event) {\n    var onBlur = props.onBlur;\n    setFocus(false);\n    return onBlur && onBlur(event);\n  };\n\n  var handleIncrease = function handleIncrease(event) {\n    event.preventDefault();\n\n    if (value + step > max) {\n      return;\n    } // Checks that the provided value is a multiple of the step\n\n\n    if (value % step === 0) {\n      onCountChange(value + step);\n    } // If not, returns nearest higher value that is a multiple of the step\n    else {\n        onCountChange(value + (step - value % step));\n      }\n  };\n\n  var handleDecrease = function handleDecrease(event) {\n    event.preventDefault();\n\n    if (value - step < min) {\n      return;\n    } // Checks that the provided value is a multiple of the step\n\n\n    if (value % step === 0) {\n      onCountChange(value - step);\n    } // If not, returns nearest lower value that is a multiple of the step\n    else {\n        onCountChange(value - value % step);\n      }\n  };\n\n  var handleChange = function handleChange(event) {\n    var newValue = Number(event.currentTarget.value);\n\n    if (isNaN(newValue)) {\n      return;\n    }\n\n    if (!Number.isInteger(newValue)) {\n      onCountChange(Math.round(newValue));\n    }\n\n    if (newValue >= min && newValue <= max) {\n      onCountChange(newValue);\n    }\n\n    return;\n  };\n\n  var handleKeyPress = function handleKeyPress(event) {\n    switch (event.key) {\n      case 'ArrowUp':\n        handleIncrease(event);\n        break;\n\n      case 'ArrowDown':\n        handleDecrease(event);\n        break;\n\n      case 'Enter':\n        event.preventDefault();\n        break;\n\n      case 'Escape':\n        onCountChange(0);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  var renderedLabel = useMemo(function () {\n    if (!label) {\n      return null;\n    }\n\n    if (typeof label === 'string') {\n      return /*#__PURE__*/React.createElement(FormControlLabel, {\n        id: labelId,\n        htmlFor: id,\n        renderOptional: !props.required\n      }, label);\n    }\n\n    if ( /*#__PURE__*/ /*#__PURE__*/isValidElement(label) && label.type === FormControlLabel) {\n      return /*#__PURE__*/cloneElement(label, {\n        id: labelId,\n        htmlFor: id\n      });\n    }\n\n    warning('label must be either a string or a FormControlLabel component.');\n  }, [id, label, labelId, props.required]);\n  var renderedDescription = useMemo(function () {\n    if (!description) {\n      return null;\n    }\n\n    if (typeof description === 'string') {\n      return /*#__PURE__*/React.createElement(FormControlDescription, null, description);\n    }\n\n    if ( /*#__PURE__*/ /*#__PURE__*/isValidElement(description) && description.type === FormControlDescription) {\n      return description;\n    }\n\n    warning('description must be either a string or a FormControlDescription component.');\n  }, [description]);\n  var errors = useMemo(function () {\n    var validateError = function validateError(err) {\n      if (!err) {\n        return null;\n      }\n\n      if (typeof err === 'string') {\n        return err;\n      }\n\n      if ( /*#__PURE__*/ /*#__PURE__*/isValidElement(err) && err.type === FormControlError) {\n        return err;\n      }\n\n      warning('error must be either a string or a FormControlError component.');\n    };\n\n    if (Array.isArray(error)) {\n      error.forEach(validateError);\n      return error;\n    }\n\n    return validateError(error);\n  }, [error]);\n  return /*#__PURE__*/React.createElement(\"div\", null, renderedLabel, renderedDescription, /*#__PURE__*/React.createElement(StyledCounterWrapper, {\n    disabled: disabled,\n    error: errors,\n    focus: focus\n  }, /*#__PURE__*/React.createElement(StyledCounterButton, {\n    onClick: handleDecrease,\n    disabled: disabled || value <= min,\n    iconOnly: /*#__PURE__*/React.createElement(RemoveCircleOutlineIcon, {\n      title: \"Decrease count\"\n    })\n  }), /*#__PURE__*/React.createElement(StyledCounterInput, _extends({}, props, {\n    ref: forwardedRef,\n    onKeyDown: handleKeyPress,\n    value: value,\n    disabled: disabled,\n    error: errors,\n    id: id,\n    onBlur: handleBlur,\n    onChange: handleChange,\n    onFocus: handleFocus\n  })), /*#__PURE__*/React.createElement(StyledCounterButton, {\n    onClick: handleIncrease,\n    disabled: disabled || value >= max,\n    iconOnly: /*#__PURE__*/React.createElement(AddCircleOutlineIcon, {\n      title: \"Increase count\"\n    })\n  })));\n});\nexport var Counter = typedMemo( /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var className = _ref2.className,\n      style = _ref2.style,\n      props = _objectWithoutProperties(_ref2, [\"className\", \"style\"]);\n\n  return /*#__PURE__*/React.createElement(StylableCounter, _extends({}, props, {\n    forwardedRef: ref\n  }));\n}));","map":null,"metadata":{},"sourceType":"module"}