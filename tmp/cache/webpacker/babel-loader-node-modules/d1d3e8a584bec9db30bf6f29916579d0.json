{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { cloneElement, forwardRef, isValidElement, useMemo } from 'react';\nimport { useUniqueId } from '../../hooks';\nimport { typedMemo, warning } from '../../utils';\nimport { FormControlDescription, FormControlError, FormControlLabel } from '../Form';\nimport { StyledTextarea, StyledTextareaWrapper } from './styled';\n\nvar StyleableTextarea = function StyleableTextarea(_ref) {\n  var description = _ref.description,\n      error = _ref.error,\n      forwardedRef = _ref.forwardedRef,\n      label = _ref.label,\n      labelId = _ref.labelId,\n      _ref$rows = _ref.rows,\n      rows = _ref$rows === void 0 ? 3 : _ref$rows,\n      _ref$resize = _ref.resize,\n      resize = _ref$resize === void 0 ? true : _ref$resize,\n      props = _objectWithoutProperties(_ref, [\"description\", \"error\", \"forwardedRef\", \"label\", \"labelId\", \"rows\", \"resize\"]);\n\n  var uniqueTextareaId = useUniqueId('textarea');\n  var id = props.id ? props.id : uniqueTextareaId;\n  var MAX_ROWS = 7;\n  var numOfRows = rows && rows > MAX_ROWS ? MAX_ROWS : rows;\n  var renderedLabel = useMemo(function () {\n    if (!label) {\n      return null;\n    }\n\n    if (typeof label === 'string') {\n      return /*#__PURE__*/React.createElement(FormControlLabel, {\n        id: labelId,\n        htmlFor: id,\n        renderOptional: !props.required\n      }, label);\n    }\n\n    if ( /*#__PURE__*/ /*#__PURE__*/isValidElement(label) && label.type === FormControlLabel) {\n      return /*#__PURE__*/cloneElement(label, {\n        id: labelId,\n        htmlFor: id\n      });\n    }\n\n    warning('label must be either a string or a FormControlLabel component.');\n  }, [id, label, labelId, props.required]);\n  var renderedDescription = useMemo(function () {\n    if (!description) {\n      return null;\n    }\n\n    if (typeof description === 'string') {\n      return /*#__PURE__*/React.createElement(FormControlDescription, null, description);\n    }\n\n    if ( /*#__PURE__*/ /*#__PURE__*/isValidElement(description) && description.type === FormControlDescription) {\n      return description;\n    }\n\n    warning('description must be either a string or a FormControlDescription component.');\n  }, [description]);\n  var errors = useMemo(function () {\n    var validateError = function validateError(err) {\n      if (!err) {\n        return null;\n      }\n\n      if (typeof err === 'string') {\n        return err;\n      }\n\n      if ( /*#__PURE__*/ /*#__PURE__*/isValidElement(err) && err.type === FormControlError) {\n        return err;\n      }\n\n      warning('error must be either a string or a FormControlError component.');\n    };\n\n    if (Array.isArray(error)) {\n      var nextError = error.reduce(function (acc, errorItem) {\n        var nextErrorItem = validateError(errorItem);\n        return nextErrorItem ? [].concat(_toConsumableArray(acc), [nextErrorItem]) : acc;\n      }, []);\n      return nextError.length > 0 ? nextError : null;\n    }\n\n    return validateError(error);\n  }, [error]);\n  return /*#__PURE__*/React.createElement(\"div\", null, renderedLabel, renderedDescription, /*#__PURE__*/React.createElement(StyledTextareaWrapper, null, /*#__PURE__*/React.createElement(StyledTextarea, _extends({}, props, {\n    error: errors,\n    id: id,\n    rows: numOfRows,\n    resize: resize,\n    ref: forwardedRef\n  }))));\n};\n\nexport var Textarea = typedMemo( /*#__PURE__*/forwardRef(function (_ref2, ref) {\n  var className = _ref2.className,\n      style = _ref2.style,\n      props = _objectWithoutProperties(_ref2, [\"className\", \"style\"]);\n\n  return /*#__PURE__*/React.createElement(StyleableTextarea, _extends({}, props, {\n    forwardedRef: ref\n  }));\n}));","map":null,"metadata":{},"sourceType":"module"}