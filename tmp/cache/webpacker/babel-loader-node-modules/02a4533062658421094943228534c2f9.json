{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { forwardRef, memo, useEffect, useState } from 'react';\nimport ReactDatePicker, { registerLocale } from 'react-datepicker';\nimport { createLocalizationProvider } from '../../utils';\nimport { Input } from '../Input';\nimport Header from './Header';\nimport { StyledDatepicker } from './styled';\n\nvar RawDatepicker = function RawDatepicker(_ref) {\n  var _ref$dateFormat = _ref.dateFormat,\n      dateFormat = _ref$dateFormat === void 0 ? 'EE, dd MMM, yyyy' : _ref$dateFormat,\n      error = _ref.error,\n      forwardedRef = _ref.forwardedRef,\n      label = _ref.label,\n      _ref$locale = _ref.locale,\n      locale = _ref$locale === void 0 ? 'en-US' : _ref$locale,\n      min = _ref.min,\n      max = _ref.max,\n      onDateChange = _ref.onDateChange,\n      required = _ref.required,\n      placeholder = _ref.placeholder,\n      value = _ref.value,\n      props = _objectWithoutProperties(_ref, [\"dateFormat\", \"error\", \"forwardedRef\", \"label\", \"locale\", \"min\", \"max\", \"onDateChange\", \"required\", \"placeholder\", \"value\"]);\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      selected = _useState2[0],\n      setSelected = _useState2[1];\n\n  var localization = createLocalizationProvider(locale);\n  registerLocale(locale, localization);\n\n  var updateDate = function updateDate(value) {\n    return onDateChange(value.toISOString());\n  };\n\n  useEffect(function () {\n    if (typeof value === 'string') {\n      setSelected(new Date(value));\n    } else {\n      setSelected(undefined);\n    }\n  }, [value]);\n  return /*#__PURE__*/React.createElement(StyledDatepicker, null, /*#__PURE__*/React.createElement(ReactDatePicker, {\n    renderCustomHeader: function renderCustomHeader(_ref2) {\n      var date = _ref2.date,\n          decreaseMonth = _ref2.decreaseMonth,\n          increaseMonth = _ref2.increaseMonth,\n          prevMonthButtonDisabled = _ref2.prevMonthButtonDisabled,\n          nextMonthButtonDisabled = _ref2.nextMonthButtonDisabled;\n      return /*#__PURE__*/React.createElement(Header, {\n        months: localization.monthsLong,\n        date: date,\n        decreaseMonth: decreaseMonth,\n        increaseMonth: increaseMonth,\n        prevMonthButtonDisabled: prevMonthButtonDisabled,\n        nextMonthButtonDisabled: nextMonthButtonDisabled\n      });\n    },\n    customInput: /*#__PURE__*/React.createElement(Input, _extends({\n      label: label,\n      error: error\n    }, props)),\n    className: \"calendar-input\",\n    calendarClassName: \"bc-datepicker\",\n    dateFormat: dateFormat || 'EE, dd MMM, yyyy',\n    locale: locale,\n    maxDate: max ? new Date(max) : undefined,\n    minDate: min ? new Date(min) : undefined,\n    selected: selected,\n    placeholderText: placeholder,\n    required: required,\n    onChange: updateDate,\n    ref: forwardedRef\n  }));\n};\n\nexport var Datepicker = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(RawDatepicker, _extends({}, props, {\n    forwardedRef: ref\n  }));\n}));","map":null,"metadata":{},"sourceType":"module"}