{"ast":null,"code":"import { ArrowDownwardIcon, ArrowUpwardIcon } from '@bigcommerce/big-design-icons';\nimport React, { memo } from 'react';\nimport { useComponentSize } from '../../../hooks';\nimport { typedMemo } from '../../../utils';\nimport { StyledFlex, StyledTableHeaderCell, StyledTableHeaderCheckbox } from './styled';\n\nvar InternalHeaderCell = function InternalHeaderCell(_ref) {\n  var children = _ref.children,\n      column = _ref.column,\n      _ref$hide = _ref.hide,\n      hide = _ref$hide === void 0 ? false : _ref$hide,\n      isSorted = _ref.isSorted,\n      onSortClick = _ref.onSortClick,\n      sortDirection = _ref.sortDirection,\n      stickyHeader = _ref.stickyHeader,\n      actionsRef = _ref.actionsRef;\n  var _column$align = column.align,\n      align = _column$align === void 0 ? 'left' : _column$align,\n      isSortable = column.isSortable,\n      width = column.width;\n  var actionsSize = useComponentSize(actionsRef);\n\n  var renderSortIcon = function renderSortIcon() {\n    if (!isSorted) {\n      return null;\n    }\n\n    return sortDirection === 'ASC' ? /*#__PURE__*/React.createElement(ArrowUpwardIcon, {\n      size: \"medium\",\n      \"data-testid\": \"asc-icon\",\n      title: \"Ascending order\"\n    }) : /*#__PURE__*/React.createElement(ArrowDownwardIcon, {\n      size: \"medium\",\n      \"data-testid\": \"desc-icon\",\n      title: \"Descending order\"\n    });\n  };\n\n  var handleClick = function handleClick(e) {\n    e.preventDefault();\n\n    if (isSortable && typeof onSortClick === 'function') {\n      onSortClick(column);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(StyledTableHeaderCell, {\n    isSortable: isSortable,\n    stickyHeader: stickyHeader,\n    onClick: handleClick,\n    width: width,\n    stickyHeight: actionsSize.height\n  }, /*#__PURE__*/React.createElement(StyledFlex, {\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    hide: hide,\n    align: align\n  }, children, !hide && renderSortIcon()), hide && renderSortIcon());\n};\n\nexport var HeaderCheckboxCell = /*#__PURE__*/memo(function (_ref2) {\n  var stickyHeader = _ref2.stickyHeader,\n      actionsRef = _ref2.actionsRef;\n  var actionsSize = useComponentSize(actionsRef);\n  return /*#__PURE__*/React.createElement(StyledTableHeaderCheckbox, {\n    stickyHeader: stickyHeader,\n    stickyHeight: actionsSize.height\n  });\n});\nexport var HeaderCell = typedMemo(InternalHeaderCell);","map":null,"metadata":{},"sourceType":"module"}