{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { useCombobox } from 'downshift';\nimport React, { cloneElement, createRef, isValidElement, useCallback, useEffect, useMemo, useState } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\nimport { useUniqueId } from '../../hooks';\nimport { typedMemo, warning } from '../../utils';\nimport { Box } from '../Box';\nimport { Flex } from '../Flex';\nimport { FlexItem } from '../Flex/Item';\nimport { FormControlLabel } from '../Form';\nimport { Input } from '../Input';\nimport { List } from '../List';\nimport { ListItem } from '../List/Item';\nimport { ListItemCheckbox } from '../List/Item/CheckboxItem';\nimport { DropdownButton, StyledDropdownIcon, StyledInputContainer } from '../Select/styled';\nimport { Small } from '../Typography';\nexport var MultiSelect = typedMemo(function (_ref) {\n  var action = _ref.action,\n      _ref$autoWidth = _ref.autoWidth,\n      autoWidth = _ref$autoWidth === void 0 ? false : _ref$autoWidth,\n      className = _ref.className,\n      disabled = _ref.disabled,\n      _ref$filterable = _ref.filterable,\n      filterable = _ref$filterable === void 0 ? true : _ref$filterable,\n      id = _ref.id,\n      inputRef = _ref.inputRef,\n      label = _ref.label,\n      labelId = _ref.labelId,\n      _ref$maxHeight = _ref.maxHeight,\n      maxHeight = _ref$maxHeight === void 0 ? 250 : _ref$maxHeight,\n      onOptionsChange = _ref.onOptionsChange,\n      options = _ref.options,\n      placeholder = _ref.placeholder,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? 'bottom-start' : _ref$placement,\n      _ref$positionFixed = _ref.positionFixed,\n      positionFixed = _ref$positionFixed === void 0 ? false : _ref$positionFixed,\n      required = _ref.required,\n      style = _ref.style,\n      value = _ref.value,\n      rest = _objectWithoutProperties(_ref, [\"action\", \"autoWidth\", \"className\", \"disabled\", \"filterable\", \"id\", \"inputRef\", \"label\", \"labelId\", \"maxHeight\", \"onOptionsChange\", \"options\", \"placeholder\", \"placement\", \"positionFixed\", \"required\", \"style\", \"value\"]); // Merge options and action\n\n\n  var initialOptions = useMemo(function () {\n    return action ? [].concat(_toConsumableArray(options), [action]) : options;\n  }, [action, options]);\n  var findSelectedOptions = useMemo(function () {\n    return initialOptions.filter(function (option) {\n      return value && value.find(function (val) {\n        return 'value' in option && val === option.value;\n      }) !== undefined;\n    });\n  }, [initialOptions, value]);\n\n  var _useState = useState(initialOptions),\n      _useState2 = _slicedToArray(_useState, 2),\n      items = _useState2[0],\n      setItems = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputValue = _useState4[0],\n      setInputValue = _useState4[1];\n\n  var _useState5 = useState(findSelectedOptions),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedOptions = _useState6[0],\n      setSelectedOptions = _useState6[1];\n\n  var defaultRef = /*#__PURE__*/createRef();\n  var multiSelectUniqueId = useUniqueId('multi-select'); // Need to set items if options prop changes\n\n  useEffect(function () {\n    return setItems(initialOptions);\n  }, [initialOptions]);\n  useEffect(function () {\n    setInputValue('');\n  }, [selectedOptions]);\n  useEffect(function () {\n    setSelectedOptions(findSelectedOptions);\n  }, [findSelectedOptions]);\n\n  var handleSetInputValue = function handleSetInputValue(changes) {\n    if (filterable && changes.isOpen === true) {\n      setItems(filterOptions(changes.inputValue));\n      setInputValue(changes.inputValue || '');\n    }\n  };\n\n  var filterOptions = function filterOptions() {\n    var inputVal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return initialOptions.filter(function (option) {\n      return option === action || option.content.toLowerCase().startsWith(inputVal.trim().toLowerCase());\n    });\n  };\n\n  var handleOnIsOpenChange = function handleOnIsOpenChange(changes) {\n    if (filterable && changes.isOpen === false) {\n      // Reset the items if filtered\n      setItems(initialOptions);\n    }\n  };\n\n  var handleOnSelectedItemChange = function handleOnSelectedItemChange(changes) {\n    if (action && changes.selectedItem === action) {\n      action.onActionClick(inputValue);\n    }\n  };\n\n  var handleStateReducer = function handleStateReducer(state, actionAndChanges) {\n    switch (actionAndChanges.type) {\n      case useCombobox.stateChangeTypes.InputBlur:\n        return _objectSpread(_objectSpread({}, actionAndChanges.changes), {}, {\n          inputValue: ''\n        });\n\n      case useCombobox.stateChangeTypes.InputKeyDownEnter:\n      case useCombobox.stateChangeTypes.ItemClick:\n        {\n          if (!actionAndChanges.changes.selectedItem) {\n            return actionAndChanges.changes;\n          } // Prevent action from changing the input value\n\n\n          if (actionAndChanges.changes.selectedItem === action) {\n            return _objectSpread(_objectSpread({}, actionAndChanges.changes), {}, {\n              inputValue: state.inputValue\n            });\n          }\n\n          var isChecked = Boolean(selectedOptions.find(function (i) {\n            return actionAndChanges.changes.selectedItem && 'value' in actionAndChanges.changes.selectedItem && i.value === actionAndChanges.changes.selectedItem.value;\n          }));\n          isChecked ? removeItem(actionAndChanges.changes.selectedItem) : addSelectedItem(actionAndChanges.changes.selectedItem);\n          return _objectSpread(_objectSpread({}, actionAndChanges.changes), {}, {\n            highlightedIndex: state.highlightedIndex,\n            inputValue: '',\n            isOpen: true\n          });\n        }\n\n      default:\n        return actionAndChanges.changes;\n    }\n  };\n\n  var removeItem = useCallback(function (item) {\n    if (!item) {\n      return;\n    }\n\n    var newOptions = selectedOptions.filter(function (i) {\n      return i.value !== item.value;\n    });\n    onOptionsChange(newOptions.map(function (option) {\n      return option.value;\n    }), newOptions);\n    setItems(initialOptions);\n  }, [initialOptions, onOptionsChange, selectedOptions]);\n  var addSelectedItem = useCallback(function (item) {\n    if (!item) {\n      return;\n    }\n\n    var newOptions = [].concat(_toConsumableArray(selectedOptions), [item]);\n    onOptionsChange(newOptions.map(function (option) {\n      return option.value;\n    }), newOptions);\n    setItems(initialOptions);\n  }, [initialOptions, onOptionsChange, selectedOptions]);\n\n  var _useCombobox = useCombobox({\n    id: multiSelectUniqueId,\n    inputId: id,\n    inputValue: inputValue,\n    itemToString: function itemToString(option) {\n      return option ? option.content : '';\n    },\n    items: items,\n    labelId: labelId,\n    onInputValueChange: handleSetInputValue,\n    onIsOpenChange: handleOnIsOpenChange,\n    onSelectedItemChange: handleOnSelectedItemChange,\n    selectedItem: null,\n    stateReducer: handleStateReducer\n  }),\n      getComboboxProps = _useCombobox.getComboboxProps,\n      getInputProps = _useCombobox.getInputProps,\n      getItemProps = _useCombobox.getItemProps,\n      getLabelProps = _useCombobox.getLabelProps,\n      getMenuProps = _useCombobox.getMenuProps,\n      getToggleButtonProps = _useCombobox.getToggleButtonProps,\n      highlightedIndex = _useCombobox.highlightedIndex,\n      isOpen = _useCombobox.isOpen,\n      openMenu = _useCombobox.openMenu; // Reset the value when Multiselect is closed\n\n\n  useEffect(function () {\n    if (!isOpen) {\n      setInputValue('');\n    }\n  }, [isOpen]);\n  var setCallbackRef = useCallback(function (ref) {\n    if (typeof inputRef === 'function') {\n      inputRef(ref);\n    }\n  }, [inputRef]);\n  var getInputRef = useCallback(function () {\n    if (inputRef && _typeof(inputRef) === 'object') {\n      return inputRef;\n    } else if (typeof inputRef === 'function') {\n      return setCallbackRef;\n    }\n\n    return defaultRef;\n  }, [defaultRef, inputRef, setCallbackRef]);\n  var renderLabel = useMemo(function () {\n    if (!label) {\n      return null;\n    }\n\n    if (typeof label === 'string') {\n      return /*#__PURE__*/React.createElement(FormControlLabel, _extends({}, getLabelProps(), {\n        renderOptional: !required\n      }), label);\n    }\n\n    if ( /*#__PURE__*/ /*#__PURE__*/isValidElement(label) && label.type === FormControlLabel) {\n      return /*#__PURE__*/cloneElement(label, getLabelProps());\n    }\n\n    warning('label must be either a string or a FormControlLabel component.');\n  }, [getLabelProps, label, required]);\n  var renderToggle = useMemo(function () {\n    return /*#__PURE__*/React.createElement(DropdownButton, _extends({}, getToggleButtonProps({\n      disabled: disabled,\n      type: 'button'\n    }), {\n      \"aria-label\": \"toggle menu\",\n      variant: \"subtle\"\n    }), /*#__PURE__*/React.createElement(StyledDropdownIcon, null));\n  }, [disabled, getToggleButtonProps]);\n  var renderInput = useMemo(function () {\n    return /*#__PURE__*/React.createElement(Reference, null, function (_ref2) {\n      var ref = _ref2.ref;\n      return /*#__PURE__*/React.createElement(StyledInputContainer, {\n        ref: ref\n      }, /*#__PURE__*/React.createElement(Input, _extends({}, rest, getInputProps({\n        autoComplete: 'no',\n        disabled: disabled,\n        onFocus: function onFocus() {\n          !isOpen && openMenu();\n        },\n        onKeyDown: function onKeyDown(event) {\n          switch (event.key) {\n            case 'Backspace':\n              if (!inputValue) {\n                removeItem(selectedOptions[selectedOptions.length - 1]);\n              }\n\n              break;\n\n            case 'Enter':\n              event.preventDefault();\n\n              if (isOpen === false) {\n                openMenu();\n                event.nativeEvent.preventDownshiftDefault = true;\n              }\n\n              break;\n\n            case 'Escape':\n              // Reset select\n              if (isOpen === false) {\n                onOptionsChange([], []);\n              }\n\n              break;\n          }\n        },\n        placeholder: placeholder,\n        ref: getInputRef()\n      }), {\n        chips: selectedOptions.map(function (option) {\n          return {\n            label: option.content,\n            onDelete: function onDelete() {\n              return removeItem(option);\n            }\n          };\n        }),\n        autoComplete: \"no\",\n        iconRight: renderToggle,\n        readOnly: !filterable,\n        required: required\n      })));\n    });\n  }, [disabled, filterable, getInputProps, getInputRef, inputValue, isOpen, onOptionsChange, openMenu, placeholder, removeItem, renderToggle, required, rest, selectedOptions]);\n  var renderAction = useCallback(function (actionItem) {\n    var index = options.length;\n    var isHighlighted = highlightedIndex === index;\n\n    var content = actionItem.content,\n        itemDisabled = actionItem.disabled,\n        icon = actionItem.icon,\n        onActionClick = actionItem.onActionClick,\n        itemProps = _objectWithoutProperties(actionItem, [\"content\", \"disabled\", \"icon\", \"onActionClick\"]);\n\n    return /*#__PURE__*/React.createElement(Box, {\n      borderTop: \"box\",\n      marginTop: \"xSmall\",\n      paddingTop: \"xSmall\",\n      key: \"\".concat(content, \"-\").concat(index)\n    }, /*#__PURE__*/React.createElement(ListItem, _extends({}, itemProps, getItemProps({\n      disabled: itemDisabled,\n      item: actionItem,\n      index: index\n    }), {\n      autoWidth: autoWidth,\n      isAction: true,\n      isHighlighted: isHighlighted\n    }), getContent(actionItem, isHighlighted)));\n  }, [getItemProps, autoWidth, highlightedIndex, options.length]);\n  var renderOptions = useMemo(function () {\n    return items.map(function (item, index) {\n      if (action && item.content === action.content) {\n        return renderAction(item);\n      }\n\n      var isHighlighted = highlightedIndex === index;\n      var isChecked = 'value' in item && Boolean(selectedOptions.find(function (i) {\n        return i.value === item.value;\n      }));\n\n      var _ref3 = item,\n          content = _ref3.content,\n          itemDisabled = _ref3.disabled,\n          icon = _ref3.icon,\n          itemProps = _objectWithoutProperties(_ref3, [\"content\", \"disabled\", \"icon\"]);\n\n      return /*#__PURE__*/React.createElement(ListItemCheckbox, _extends({}, itemProps, getItemProps({\n        disabled: itemDisabled,\n        item: item,\n        index: index\n      }), {\n        autoWidth: autoWidth,\n        checked: isChecked,\n        description: item.description,\n        isHighlighted: isHighlighted,\n        key: \"\".concat(content, \"-\").concat(index),\n        label: item.content,\n        onClick: function onClick() {\n          if (itemDisabled) {\n            return;\n          }\n\n          isChecked ? removeItem(item) : addSelectedItem(item);\n        }\n      }));\n    });\n  }, [action, addSelectedItem, getItemProps, autoWidth, highlightedIndex, items, removeItem, renderAction, selectedOptions]);\n  var renderList = useMemo(function () {\n    return /*#__PURE__*/React.createElement(Popper, {\n      modifiers: [{\n        name: 'offset',\n        options: {\n          offset: [0, 4]\n        }\n      }],\n      placement: placement,\n      strategy: positionFixed ? 'fixed' : 'absolute'\n    }, function (_ref4) {\n      var popperPlacement = _ref4.placement,\n          ref = _ref4.ref,\n          popperStyle = _ref4.style,\n          update = _ref4.update;\n      return /*#__PURE__*/React.createElement(List, _extends({}, getMenuProps({\n        ref: ref\n      }), {\n        \"data-placement\": popperPlacement,\n        isOpen: isOpen,\n        maxHeight: maxHeight,\n        style: popperStyle,\n        update: update\n      }), isOpen && renderOptions);\n    });\n  }, [getMenuProps, isOpen, maxHeight, placement, positionFixed, renderOptions]);\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Manager, null, renderLabel, /*#__PURE__*/React.createElement(\"div\", getComboboxProps(), renderInput), renderList));\n});\n\nvar getContent = function getContent(item, isHighlighted) {\n  var content = item.content,\n      disabled = item.disabled,\n      description = item.description,\n      icon = item.icon;\n  return /*#__PURE__*/React.createElement(Flex, {\n    alignItems: \"center\",\n    flexDirection: \"row\"\n  }, icon && /*#__PURE__*/React.createElement(FlexItem, {\n    alignSelf: description ? 'flex-start' : undefined,\n    paddingRight: \"xSmall\",\n    paddingTop: description ? 'xSmall' : undefined\n  }, renderIcon(item, isHighlighted)), description ? /*#__PURE__*/React.createElement(FlexItem, {\n    paddingVertical: \"xSmall\"\n  }, content, /*#__PURE__*/React.createElement(Small, {\n    color: descriptionColor(disabled)\n  }, description)) : content);\n};\n\nvar renderIcon = function renderIcon(item, isHighlighted) {\n  return /*#__PURE__*/ /*#__PURE__*/isValidElement(item.icon) && /*#__PURE__*/cloneElement(item.icon, {\n    color: iconColor(item, isHighlighted),\n    size: 'large'\n  });\n};\n\nvar iconColor = function iconColor(item, isHighlighted) {\n  if (item.disabled) {\n    return 'secondary40';\n  }\n\n  if (!isHighlighted || !('onActionClick' in item)) {\n    return 'secondary60';\n  }\n\n  return 'actionType' in item ? item.actionType === 'destructive' ? 'danger50' : 'primary' : 'primary';\n};\n\nvar descriptionColor = function descriptionColor(isDisabled) {\n  return isDisabled ? 'secondary40' : 'secondary60';\n};","map":null,"metadata":{},"sourceType":"module"}