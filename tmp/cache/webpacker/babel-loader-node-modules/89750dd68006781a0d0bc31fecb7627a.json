{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport { useEventCallback, useUniqueId } from '../../hooks';\nimport { typedMemo } from '../../utils';\nimport { Actions } from './Actions';\nimport { Body } from './Body';\nimport { Head } from './Head';\nimport { HeaderCell } from './HeaderCell';\nimport { HeaderCheckboxCell } from './HeaderCell/HeaderCell';\nimport { Row } from './Row';\nimport { StyledTable, StyledTableFigure } from './styled';\n\nvar InternalTable = function InternalTable(props) {\n  var className = props.className,\n      columns = props.columns,\n      actions = props.actions,\n      emptyComponent = props.emptyComponent,\n      _props$headerless = props.headerless,\n      headerless = _props$headerless === void 0 ? false : _props$headerless,\n      id = props.id,\n      itemName = props.itemName,\n      items = props.items,\n      _props$keyField = props.keyField,\n      keyField = _props$keyField === void 0 ? 'id' : _props$keyField,\n      pagination = props.pagination,\n      selectable = props.selectable,\n      sortable = props.sortable,\n      stickyHeader = props.stickyHeader,\n      style = props.style,\n      rest = _objectWithoutProperties(props, [\"className\", \"columns\", \"actions\", \"emptyComponent\", \"headerless\", \"id\", \"itemName\", \"items\", \"keyField\", \"pagination\", \"selectable\", \"sortable\", \"stickyHeader\", \"style\"]);\n\n  var actionsRef = useRef(null);\n  var uniqueTableId = useUniqueId('table');\n  var tableIdRef = useRef(id || uniqueTableId);\n  var isSelectable = Boolean(selectable);\n\n  var _useState = useState(new Set()),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedItems = _useState2[0],\n      setSelectedItems = _useState2[1];\n\n  var eventCallback = useEventCallback(function (item) {\n    if (!selectable || !item) {\n      return;\n    }\n\n    var onSelectionChange = selectable.onSelectionChange;\n    var nextIsSelected = !selectedItems.has(item);\n\n    if (nextIsSelected) {\n      onSelectionChange([].concat(_toConsumableArray(selectedItems), [item]));\n    } else {\n      onSelectionChange(_toConsumableArray(selectedItems).filter(function (selectedItem) {\n        return selectedItem !== item;\n      }));\n    }\n  });\n  var selectableConditionalDep = selectable ? selectable.selectedItems : null;\n  useEffect(function () {\n    if (selectable) {\n      setSelectedItems(new Set(selectable.selectedItems));\n    }\n  }, [selectable, selectableConditionalDep]);\n  var onItemSelect = selectable ? eventCallback : undefined;\n  var onSortClick = useCallback(function (column) {\n    if (!sortable || !column.isSortable) {\n      return;\n    }\n\n    var hash = column.hash;\n    var sortDirection = sortable.direction === 'ASC' ? 'DESC' : 'ASC';\n\n    if (typeof sortable.onSort === 'function') {\n      sortable.onSort(hash, sortDirection, column);\n    }\n  }, [sortable]);\n\n  var shouldRenderActions = function shouldRenderActions() {\n    return Boolean(actions) || Boolean(pagination) || Boolean(selectable) || Boolean(itemName);\n  };\n\n  var getItemKey = function getItemKey(item, index) {\n    if (item[keyField] !== undefined) {\n      return item[keyField];\n    }\n\n    return index;\n  };\n\n  var renderHeaders = function renderHeaders() {\n    return /*#__PURE__*/React.createElement(Head, {\n      hidden: headerless\n    }, /*#__PURE__*/React.createElement(\"tr\", null, isSelectable && /*#__PURE__*/React.createElement(HeaderCheckboxCell, {\n      stickyHeader: stickyHeader,\n      actionsRef: actionsRef\n    }), columns.map(function (column, index) {\n      var hash = column.hash,\n          header = column.header,\n          isSortable = column.isSortable,\n          hideHeader = column.hideHeader;\n      var isSorted = isSortable && sortable && hash === sortable.columnHash;\n      var sortDirection = sortable && sortable.direction;\n      return /*#__PURE__*/React.createElement(HeaderCell, {\n        column: column,\n        hide: hideHeader,\n        isSorted: isSorted,\n        key: index,\n        onSortClick: onSortClick,\n        sortDirection: sortDirection,\n        stickyHeader: stickyHeader,\n        actionsRef: actionsRef\n      }, header);\n    })));\n  };\n\n  var renderItems = function renderItems() {\n    return /*#__PURE__*/React.createElement(Body, {\n      withFirstRowBorder: headerless\n    }, items.map(function (item, index) {\n      var key = getItemKey(item, index);\n      var isSelected = selectedItems.has(item);\n      return /*#__PURE__*/React.createElement(Row, {\n        columns: columns,\n        isSelectable: isSelectable,\n        isSelected: isSelected,\n        item: item,\n        key: key,\n        onItemSelect: onItemSelect\n      });\n    }));\n  };\n\n  var renderEmptyState = function renderEmptyState() {\n    if (items.length === 0 && emptyComponent) {\n      return emptyComponent;\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, shouldRenderActions() && /*#__PURE__*/React.createElement(Actions, {\n    customActions: actions,\n    pagination: pagination,\n    onSelectionChange: selectable && selectable.onSelectionChange,\n    selectedItems: selectedItems,\n    items: items,\n    itemName: itemName,\n    tableId: tableIdRef.current,\n    stickyHeader: stickyHeader,\n    forwardedRef: actionsRef\n  }), /*#__PURE__*/React.createElement(StyledTable, _extends({}, rest, {\n    id: tableIdRef.current\n  }), renderHeaders(), renderItems()), renderEmptyState());\n};\n\nexport var Table = typedMemo(InternalTable);\nexport var TableFigure = /*#__PURE__*/memo(function (props) {\n  return /*#__PURE__*/React.createElement(StyledTableFigure, props);\n});","map":null,"metadata":{},"sourceType":"module"}