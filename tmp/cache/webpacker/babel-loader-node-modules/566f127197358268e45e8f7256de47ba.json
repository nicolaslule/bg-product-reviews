{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { asyncToggle, getNextVisibleNode, getPreviousVisibleNode, initialize, toggleNode } from './reducer.utils';\nexport var createReducerInit = function createReducerInit() {\n  return function (_ref) {\n    var nodes = _ref.nodes,\n        selectable = _ref.selectable;\n    return initialize(nodes, selectable);\n  };\n};\nexport var createReducer = function createReducer() {\n  return function (state, action) {\n    switch (action.type) {\n      case 'TOGGLE_NODE':\n        return toggleNode(state, action);\n\n      case 'ASYNC_TOGGLE':\n        return asyncToggle(state, action);\n\n      case 'FOCUS':\n        return _objectSpread(_objectSpread({}, state), {}, {\n          focusedNode: action.id\n        });\n\n      case 'FOCUS_DOWN':\n        return _objectSpread(_objectSpread({}, state), {}, {\n          focusedNode: getNextVisibleNode(state.visibleNodeIds, action.id)\n        });\n\n      case 'FOCUS_UP':\n        return _objectSpread(_objectSpread({}, state), {}, {\n          focusedNode: getPreviousVisibleNode(state.visibleNodeIds, action.id)\n        });\n\n      case 'FOCUS_FIRST':\n        return _objectSpread(_objectSpread({}, state), {}, {\n          focusedNode: state.visibleNodeIds[0]\n        });\n\n      case 'FOCUS_LAST':\n        return _objectSpread(_objectSpread({}, state), {}, {\n          focusedNode: state.visibleNodeIds[state.visibleNodeIds.length - 1]\n        });\n\n      case 'SELECTED_NODE':\n        if (action.values) {\n          return _objectSpread(_objectSpread({}, state), {}, {\n            selectedValues: action.values\n          });\n        }\n\n        return state;\n\n      default:\n        return state;\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}