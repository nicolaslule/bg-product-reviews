{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport React, { memo, useEffect, useMemo, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Manager, Popper, Reference } from 'react-popper';\nimport { Small } from '../Typography';\nimport { StyledTooltip, StyledTooltipTrigger } from './styled';\nexport var Tooltip = /*#__PURE__*/memo(function (_ref) {\n  var children = _ref.children,\n      _ref$inline = _ref.inline,\n      inline = _ref$inline === void 0 ? true : _ref$inline,\n      modifiers = _ref.modifiers,\n      trigger = _ref.trigger,\n      props = _objectWithoutProperties(_ref, [\"children\", \"inline\", \"modifiers\", \"trigger\"]);\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isVisible = _useState2[0],\n      setIsVisible = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      tooltipContainer = _useState4[0],\n      setTooltipContainer = _useState4[1];\n\n  var tooltipModifiers = useMemo(function () {\n    var mods = modifiers ? modifiers : [];\n    return [{\n      name: 'eventListeners',\n      options: {\n        scroll: isVisible,\n        resize: isVisible\n      }\n    }, {\n      name: 'offset',\n      options: {\n        offset: [0, 4]\n      }\n    }].concat(_toConsumableArray(mods));\n  }, [isVisible, modifiers]);\n  useEffect(function () {\n    var container = document.createElement('div');\n    document.body.appendChild(container);\n    setTooltipContainer(container);\n  }, []);\n  useEffect(function () {\n    return function () {\n      if (tooltipContainer) {\n        document.body.removeChild(tooltipContainer);\n      }\n    };\n  }, [tooltipContainer]);\n\n  var renderContent = function renderContent() {\n    return typeof children === 'string' ? /*#__PURE__*/React.createElement(Small, {\n      color: \"white\"\n    }, children) : children;\n  };\n\n  var hideTooltip = function hideTooltip() {\n    setIsVisible(false);\n  };\n\n  var showTooltip = function showTooltip() {\n    setIsVisible(true);\n  };\n\n  var onKeyDown = function onKeyDown(event) {\n    if (event.key === 'Escape') {\n      setIsVisible(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Manager, null, /*#__PURE__*/React.createElement(Reference, null, function (_ref2) {\n    var ref = _ref2.ref;\n    return /*#__PURE__*/React.createElement(StyledTooltipTrigger, {\n      inline: inline,\n      onBlur: hideTooltip,\n      onFocus: showTooltip,\n      onKeyDown: onKeyDown,\n      onMouseEnter: showTooltip,\n      onMouseLeave: hideTooltip,\n      ref: ref\n    }, trigger);\n  }), tooltipContainer ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Popper, {\n    placement: props.placement || 'top',\n    modifiers: tooltipModifiers\n  }, function (_ref3) {\n    var placement = _ref3.placement,\n        ref = _ref3.ref,\n        style = _ref3.style;\n    return isVisible && /*#__PURE__*/React.createElement(StyledTooltip, {\n      ref: ref,\n      style: style,\n      \"data-placement\": placement\n    }, renderContent());\n  }), tooltipContainer) : null);\n});","map":null,"metadata":{},"sourceType":"module"}