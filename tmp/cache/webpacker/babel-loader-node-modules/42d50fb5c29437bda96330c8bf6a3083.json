{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport { useSelect } from 'downshift';\nimport React, { cloneElement, Fragment, isValidElement, memo, useCallback, useMemo, useRef } from 'react';\nimport { Manager, Popper, Reference } from 'react-popper';\nimport { useUniqueId } from '../../hooks';\nimport { Flex } from '../Flex';\nimport { FlexItem } from '../Flex/Item';\nimport { List } from '../List';\nimport { ListGroupHeader } from '../List/GroupHeader';\nimport { ListGroupSeparator } from '../List/GroupSeparator';\nimport { ListItem } from '../List/Item';\nimport { Tooltip } from '../Tooltip';\nimport { StyledBox, StyledLink } from './styled';\nexport var Dropdown = /*#__PURE__*/memo(function (_ref) {\n  var className = _ref.className,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$maxHeight = _ref.maxHeight,\n      maxHeight = _ref$maxHeight === void 0 ? 250 : _ref$maxHeight,\n      id = _ref.id,\n      items = _ref.items,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? 'bottom-start' : _ref$placement,\n      toggle = _ref.toggle,\n      style = _ref.style,\n      rest = _objectWithoutProperties(_ref, [\"className\", \"disabled\", \"maxHeight\", \"id\", \"items\", \"placement\", \"toggle\", \"style\"]); // We only need the items to pass down to Downshift, not groups\n\n\n  var onlyItems = useMemo(function () {\n    return flattenItems(items);\n  }, [items]); // We need to keep track of key since we need to use it between groups.\n\n  var itemKey = useRef(0);\n  var dropdownUniqueId = useUniqueId('dropdown');\n  var handleOnSelectedItemChange = useCallback(function (_ref2) {\n    var selectedItem = _ref2.selectedItem;\n\n    if (!selectedItem) {\n      return;\n    }\n\n    if (selectedItem.type !== 'link' && typeof selectedItem.onItemClick === 'function') {\n      selectedItem.onItemClick(selectedItem);\n    }\n  }, []);\n\n  var _useSelect = useSelect({\n    circularNavigation: true,\n    defaultHighlightedIndex: 0,\n    id: dropdownUniqueId,\n    itemToString: function itemToString(item) {\n      return item ? item.content : '';\n    },\n    items: onlyItems,\n    menuId: id,\n    onSelectedItemChange: handleOnSelectedItemChange,\n    selectedItem: null,\n    toggleButtonId: toggle.props.id\n  }),\n      getItemProps = _useSelect.getItemProps,\n      getMenuProps = _useSelect.getMenuProps,\n      getToggleButtonProps = _useSelect.getToggleButtonProps,\n      highlightedIndex = _useSelect.highlightedIndex,\n      isOpen = _useSelect.isOpen;\n\n  var renderToggle = useMemo(function () {\n    return /*#__PURE__*/React.createElement(Reference, null, function (_ref3) {\n      var ref = _ref3.ref;\n      return /*#__PURE__*/ /*#__PURE__*/isValidElement(toggle) && /*#__PURE__*/cloneElement(toggle, _objectSpread(_objectSpread({}, getToggleButtonProps({\n        disabled: disabled,\n        ref: ref\n      })), {}, {\n        'aria-expanded': isOpen\n      }));\n    });\n  }, [disabled, getToggleButtonProps, isOpen, toggle]);\n  var renderItem = useCallback(function (item) {\n    var actionType = item.actionType,\n        content = item.content,\n        itemDisabled = item.disabled,\n        hash = item.hash,\n        onItemClick = item.onItemClick,\n        type = item.type,\n        itemProps = _objectWithoutProperties(item, [\"actionType\", \"content\", \"disabled\", \"hash\", \"onItemClick\", \"type\"]);\n\n    var key = itemKey.current;\n    var isHighlighted = highlightedIndex === key;\n    itemKey.current += 1;\n    return /*#__PURE__*/React.createElement(ListItem, _extends({}, itemProps, getItemProps({\n      disabled: itemDisabled,\n      index: key,\n      item: item\n    }), {\n      actionType: actionType,\n      isAction: true,\n      isHighlighted: isHighlighted,\n      key: \"\".concat(content, \"-\").concat(key)\n    }), getContent(item, isHighlighted));\n  }, [getItemProps, highlightedIndex]);\n  var renderLinkItem = useCallback(function (item) {\n    var actionType = item.actionType,\n        content = item.content,\n        itemDisabled = item.disabled,\n        url = item.url,\n        target = item.target,\n        type = item.type,\n        itemProps = _objectWithoutProperties(item, [\"actionType\", \"content\", \"disabled\", \"url\", \"target\", \"type\"]);\n\n    var key = itemKey.current;\n    var isHighlighted = highlightedIndex === key;\n    itemKey.current += 1;\n    return /*#__PURE__*/React.createElement(ListItem, _extends({}, itemProps, getItemProps({\n      disabled: itemDisabled,\n      index: key,\n      item: item\n    }), {\n      actionType: actionType,\n      isAction: true,\n      isHighlighted: isHighlighted,\n      key: \"\".concat(content, \"-\").concat(key)\n    }), getContent(item, isHighlighted));\n  }, [getItemProps, highlightedIndex]);\n  var renderItems = useCallback(function (dropdownItems) {\n    return Array.isArray(dropdownItems) && dropdownItems.map(function (item) {\n      return item.type === 'link' ? renderLinkItem(item) : renderItem(item);\n    });\n  }, [renderItem, renderLinkItem]);\n  var renderGroup = useCallback(function (group) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, group.separated && /*#__PURE__*/React.createElement(ListGroupSeparator, null), group.label && /*#__PURE__*/React.createElement(ListGroupHeader, null, group.label), renderItems(group.items));\n  }, [renderItems]);\n  var renderChildren = useMemo(function () {\n    // Reset the key every time we rerender children\n    itemKey.current = 0;\n\n    if (Array.isArray(items) && items.every(isGroup)) {\n      return items.map(function (group, index) {\n        return /*#__PURE__*/React.createElement(Fragment, {\n          key: index\n        }, renderGroup(group));\n      });\n    }\n\n    if (Array.isArray(items) && items.every(isItem)) {\n      return renderItems(items);\n    }\n  }, [items, renderGroup, renderItems]);\n  var renderList = useMemo(function () {\n    return /*#__PURE__*/React.createElement(Popper, {\n      modifiers: [{\n        name: 'eventListeners'\n      }, {\n        name: 'offset',\n        options: {\n          offset: [0, 4]\n        }\n      }],\n      strategy: \"absolute\",\n      placement: placement\n    }, function (_ref4) {\n      var popperPlacement = _ref4.placement,\n          ref = _ref4.ref,\n          popperStyle = _ref4.style,\n          update = _ref4.update;\n      return /*#__PURE__*/React.createElement(List, _extends({}, rest, getMenuProps({\n        onKeyDown: function onKeyDown(event) {\n          if (event.key === 'Enter') {\n            var element = event.currentTarget.children[highlightedIndex];\n            var link = element.querySelector('a'); // We want to click the link if it is selected\n\n            if (link) {\n              link.click();\n            }\n          }\n        },\n        ref: ref\n      }), {\n        \"data-placement\": popperPlacement,\n        isOpen: isOpen,\n        maxHeight: maxHeight,\n        style: popperStyle,\n        update: update\n      }), isOpen && renderChildren);\n    });\n  }, [getMenuProps, highlightedIndex, isOpen, maxHeight, placement, renderChildren, rest]);\n  return /*#__PURE__*/React.createElement(Manager, null, /*#__PURE__*/React.createElement(StyledBox, null, renderToggle, renderList));\n});\n\nvar flattenItems = function flattenItems(items) {\n  return items.every(isGroup) ? items.map(function (group) {\n    return group.items;\n  }).reduce(function (acum, curr) {\n    return acum.concat(curr);\n  }, []) : items;\n};\n\nvar isGroup = function isGroup(item) {\n  return 'items' in item && !('content' in item);\n};\n\nvar isItem = function isItem(item) {\n  return 'content' in item && !('items' in item);\n};\n\nvar renderIcon = function renderIcon(item, isHighlighted) {\n  return /*#__PURE__*/ /*#__PURE__*/isValidElement(item.icon) && /*#__PURE__*/cloneElement(item.icon, {\n    color: iconColor(item, isHighlighted),\n    size: 'large'\n  });\n};\n\nvar getContent = function getContent(item, isHighlighted) {\n  var itemDisabled = item.disabled,\n      icon = item.icon,\n      tooltip = item.tooltip;\n  var baseContent = /*#__PURE__*/React.createElement(Flex, {\n    alignItems: \"center\",\n    flexDirection: \"row\"\n  }, icon && /*#__PURE__*/React.createElement(FlexItem, {\n    paddingRight: \"xSmall\"\n  }, renderIcon(item, isHighlighted)), item.content);\n  var content = item.type === 'link' && !itemDisabled ? wrapInLink(item, baseContent) : baseContent;\n  return itemDisabled && tooltip ? wrapInTooltip(tooltip, content) : content;\n};\n\nvar iconColor = function iconColor(item, isHighlighted) {\n  if (item.disabled) {\n    return 'secondary40';\n  }\n\n  if (!isHighlighted) {\n    return 'secondary60';\n  }\n\n  return item.actionType === 'destructive' ? 'danger50' : 'primary';\n};\n\nvar wrapInLink = function wrapInLink(item, content) {\n  return /*#__PURE__*/React.createElement(StyledLink, {\n    href: item.url,\n    tabIndex: -1,\n    target: item.target\n  }, content);\n};\n\nvar wrapInTooltip = function wrapInTooltip(tooltip, tooltipTrigger) {\n  return /*#__PURE__*/React.createElement(Tooltip, {\n    placement: \"left\",\n    trigger: tooltipTrigger,\n    modifiers: [{\n      name: 'preventOverflow'\n    }, {\n      name: 'offset',\n      options: {\n        offset: [0, 20]\n      }\n    }],\n    inline: false\n  }, tooltip);\n};","map":null,"metadata":{},"sourceType":"module"}