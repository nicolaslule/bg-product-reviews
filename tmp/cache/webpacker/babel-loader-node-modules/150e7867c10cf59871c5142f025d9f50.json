{"ast":null,"code":"import { ErrorIcon } from '@bigcommerce/big-design-icons';\nimport React, { Children, Fragment, isValidElement } from 'react';\nimport { warning } from '../../../utils';\nimport { Checkbox } from '../../Checkbox';\nimport { Radio } from '../../Radio';\nimport { FormControlError } from '../Error';\nimport { StyledError, StyledGroup, StyledInlineGroup } from './styled';\nexport var FormGroup = function FormGroup(props) {\n  var children = props.children,\n      groupErrors = props.errors;\n  var childrenCount = Children.count(children);\n  var inline = !Children.toArray(children).every(function (child) {\n    return /*#__PURE__*/ /*#__PURE__*/isValidElement(child) && (child.type === Checkbox || child.type === Radio);\n  });\n\n  var renderErrors = function renderErrors() {\n    // If Form.Group has errors prop, don't generate errors from children\n    if (groupErrors) {\n      return generateErrors(groupErrors, true);\n    }\n\n    return Children.map(children, function (child) {\n      if ( /*#__PURE__*/isValidElement(child)) {\n        var error = child.props.error;\n        return error && generateErrors(error);\n      }\n    });\n  };\n\n  if (inline) {\n    return /*#__PURE__*/React.createElement(StyledInlineGroup, {\n      childrenCount: childrenCount\n    }, children, renderErrors());\n  }\n\n  return /*#__PURE__*/React.createElement(StyledGroup, null, children, renderErrors());\n};\n\nvar generateErrors = function generateErrors(errors) {\n  var fromGroup = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var key = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (typeof errors === 'string') {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: key\n    }, /*#__PURE__*/React.createElement(StyledError, {\n      alignItems: \"center\"\n    }, /*#__PURE__*/React.createElement(ErrorIcon, {\n      color: \"danger\"\n    }), /*#__PURE__*/React.createElement(FormControlError, null, errors)));\n  }\n\n  if ( /*#__PURE__*/ /*#__PURE__*/isValidElement(errors) && errors.type === FormControlError) {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: key\n    }, /*#__PURE__*/React.createElement(StyledError, {\n      alignItems: \"center\"\n    }, /*#__PURE__*/React.createElement(ErrorIcon, {\n      color: \"danger\"\n    }), errors));\n  }\n\n  if (Array.isArray(errors)) {\n    return errors.map(function (error, index) {\n      return error && generateErrors(error, fromGroup, index);\n    });\n  }\n\n  if (!errors) {\n    return null;\n  }\n\n  if (fromGroup) {\n    warning('errors must be either a string, FormControlError, or an array of strings or FormControlError components.');\n  }\n};","map":null,"metadata":{},"sourceType":"module"}